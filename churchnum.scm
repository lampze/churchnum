(define zero (lambda (f) (lambda (x) x)))
(define succ (lambda (n) (lambda (f) (lambda (x)
                             (f ((n f) x))))))
(define plus-v1 (lambda (m) (lambda (n) (lambda (f) (lambda (x)
                                       ((m f) ((n f) x)))))))
(define plus-v2 (lambda (m) (lambda (n)
                         ((m succ) n))))
(define mult-v1 (lambda (m) (lambda (n)
                       ((m (plus n)) zero))))
(define mult-v2 (lambda (m) (lambda (n) (lambda (f)
                                (m (n f))))))
(define exp (lambda (m) (lambda (n) (n m))))
(alias plus plus-v1)
(alias mult mult-v2)
(define one (succ zero))
(define two ((plus one) one))
(define three ((plus two) one))
(define prt (lambda (x)
              ((x add1) 0)))
